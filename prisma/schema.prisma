// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Channel {
  id          String @id @default(uuid())
  img         String
  userId      String
  description String @default("")

  subscribes Subscribe[]
  videos     Video[]
}

model Subscribe {
  id     String @id @default(uuid())
  userId String

  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  channelId String?
}

model Video {
  id          String @id @default(uuid())
  userId      String
  title       String
  description String @default("")
  video       String
  viewCount   Int    @default(0)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  comments  Comment[]
  channel   Channel?  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String?
}

model Comment {
  id      String @id @default(uuid())
  userId  String
  comment String
  videoId String
  video   Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
